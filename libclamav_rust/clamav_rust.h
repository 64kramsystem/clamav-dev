/* Copyright (C) 2021-2022 Cisco Systems, Inc. and/or its affiliates. All rights reserved. */

#ifndef __CLAMAV_RUST_H
#define __CLAMAV_RUST_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "clamav.h"
#include "matcher-ac.h"
typedef struct cli_matcher cli_matcher; typedef struct cli_ctx_tag cli_ctx;

/**
 * A generic container for any error that implements `Into<std::error::Error>`
 */
typedef struct FFIError FFIError;

typedef void *fuzzyhashmap_t;

typedef struct image_fuzzy_hash {
  uint8_t hash[8];
} image_fuzzy_hash;

typedef struct image_fuzzy_hash image_fuzzy_hash_t;

typedef long __off_t;

typedef long __off64_t;

typedef struct _IO_FILE {
  int _flags;
  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
  _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
  void *_lock;
  __off64_t _offset;
  _IO_codecvt *_codecvt;
  _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;
  char _unused2[20];
} _IO_FILE;

typedef struct _IO_FILE FILE;

typedef int __int32_t;

typedef long __time_t;

typedef __time_t time_t;

typedef __dirstream DIR;

typedef unsigned long __ino_t;

typedef struct dirent {
  __ino_t d_ino;
  __off_t d_off;
  unsigned short d_reclen;
  unsigned char d_type;
  char d_name[256];
} dirent;

typedef struct __pthread_internal_list {
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_internal_list;

typedef struct __pthread_internal_list __pthread_list_t;

typedef struct __pthread_mutex_s {
  int __lock;
  unsigned int __count;
  int __owner;
  unsigned int __nusers;
  int __kind;
  short __spins;
  short __elision;
  __pthread_list_t __list;
} __pthread_mutex_s;

typedef union pthread_mutex_t {
  struct __pthread_mutex_s __data;
  char __size[40];
  long __align;
} pthread_mutex_t;

typedef unsigned long __dev_t;

typedef unsigned long __nlink_t;

typedef unsigned int __mode_t;

typedef unsigned int __uid_t;

typedef unsigned int __gid_t;

typedef long __blksize_t;

typedef long __blkcnt_t;

typedef long __syscall_slong_t;

typedef struct timespec {
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
} timespec;

typedef struct stat {
  __dev_t st_dev;
  __ino_t st_ino;
  __nlink_t st_nlink;
  __mode_t st_mode;
  __uid_t st_uid;
  __gid_t st_gid;
  int __pad0;
  __dev_t st_rdev;
  __off_t st_size;
  __blksize_t st_blksize;
  __blkcnt_t st_blocks;
  struct timespec st_atim;
  struct timespec st_mtim;
  struct timespec st_ctim;
  __syscall_slong_t __glibc_reserved[3];
} stat;

typedef struct cli_bm_patt {
  unsigned char *pattern;
  unsigned char *prefix;
  char *virname;
  uint32_t offdata[4];
  uint32_t offset_min;
  uint32_t offset_max;
  struct cli_bm_patt *next;
  uint16_t length;
  uint16_t prefix_length;
  uint16_t cnt;
  unsigned char pattern0;
  uint32_t boundary;
  uint32_t filesize;
} cli_bm_patt;

typedef union C2RustUnnamed_4 {
  size_t as_size_t;
  void *as_ptr;
} C2RustUnnamed_4;

typedef struct cli_htu32_element {
  uint32_t key;
  union C2RustUnnamed_4 data;
} cli_htu32_element;

typedef struct cli_htu32 {
  struct cli_htu32_element *htable;
  size_t capacity;
  size_t used;
  size_t maxfill;
} cli_htu32;

typedef struct cli_hash_patt {
  struct cli_htu32 sizehashes[3];
} cli_hash_patt;

typedef struct cli_sz_hash {
  uint8_t *hash_array;
  const char **virusnames;
  uint32_t items;
} cli_sz_hash;

typedef struct cli_hash_wild {
  struct cli_sz_hash hashes[3];
} cli_hash_wild;

typedef unsigned int lsig_type;

typedef lsig_type lsig_type_t;

typedef union C2RustUnnamed_3 {
  char *logic;
  uint8_t *code_start;
} C2RustUnnamed_3;

typedef unsigned int tdb_type;

typedef tdb_type tdb_type_t;

typedef MP mpool_t;

typedef struct cli_lsig_tdb {
  uint32_t *val;
  uint32_t *range;
  char *str_0;
  tdb_type_t cnt[3];
  uint32_t subsigs;
  const uint32_t *target;
  const uint32_t *engine;
  const uint32_t *nos;
  const uint32_t *ep;
  const uint32_t *filesize;
  const uint32_t *container;
  const uint32_t *handlertype;
  const uint32_t *intermediates;
  const char *icongrp1;
  const char *icongrp2;
  uint32_t *macro_ptids;
  mpool_t *mempool;
} cli_lsig_tdb;

typedef struct cli_ac_lsig {
  uint32_t id;
  unsigned int bc_idx;
  lsig_type_t type_0;
  uint8_t flag;
  union C2RustUnnamed_3 u;
  char *virname;
  struct cli_lsig_tdb tdb;
} cli_ac_lsig;

typedef struct cli_alt_node {
  uint16_t *str_0;
  uint16_t len;
  uint8_t unique;
  struct cli_alt_node *next;
} cli_alt_node;

typedef union C2RustUnnamed_1 {
  unsigned char *byte;
  unsigned char **f_str;
  struct cli_alt_node *v_str;
} C2RustUnnamed_1;

typedef struct cli_ac_special {
  union C2RustUnnamed_1 alt;
  uint16_t len[2];
  uint16_t num;
  uint16_t type_0;
  uint16_t negative;
} cli_ac_special;

typedef struct cli_ac_patt {
  uint16_t *pattern;
  uint16_t *prefix;
  uint16_t length[3];
  uint16_t prefix_length[3];
  uint32_t mindist;
  uint32_t maxdist;
  uint32_t sigid;
  uint32_t lsigid[3];
  uint16_t ch[2];
  char *virname;
  void *customdata;
  uint16_t ch_mindist[2];
  uint16_t ch_maxdist[2];
  uint16_t parts;
  uint16_t partno;
  uint16_t special;
  uint16_t special_pattern;
  struct cli_ac_special **special_table;
  uint16_t rtype;
  uint16_t type_0;
  uint32_t offdata[4];
  uint32_t offset_min;
  uint32_t offset_max;
  uint32_t boundary;
  uint8_t depth;
  uint8_t sigopts;
} cli_ac_patt;

typedef union C2RustUnnamed_2 {
  struct cli_ac_node *node;
  struct cli_ac_list *next;
} C2RustUnnamed_2;

typedef struct cli_ac_list {
  struct cli_ac_patt *me;
  union C2RustUnnamed_2 c2rust_unnamed;
  struct cli_ac_list *next_same;
} cli_ac_list;

typedef struct cli_ac_node {
  struct cli_ac_list *list;
  struct cli_ac_node **trans;
  struct cli_ac_node *fail;
} cli_ac_node;

typedef pcre2_real_code_8 pcre2_code_8;

typedef pcre2_real_match_context_8 pcre2_match_context_8;

typedef struct cli_pcre_data {
  pcre2_code_8 *re;
  pcre2_match_context_8 *mctx;
  int options;
  char *expression;
  uint32_t search_offset;
} cli_pcre_data;

typedef struct cli_pcre_meta {
  char *trigger;
  uint32_t lsigid[3];
  struct cli_pcre_data pdata;
  uint32_t offdata[4];
  uint32_t offset_min;
  uint32_t offset_max;
  uint32_t flags;
  char *statname;
  uint32_t sigtime_id;
  uint32_t sigmatch_id;
} cli_pcre_meta;

typedef struct cli_bcomp_comp {
  char comp_symbol;
  int64_t comp_value;
} cli_bcomp_comp;

typedef struct cli_bcomp_meta {
  uint16_t ref_subsigid;
  uint32_t lsigid[3];
  ssize_t offset;
  uint16_t options;
  size_t byte_len;
  struct cli_bcomp_comp **comps;
  uint32_t comp_count;
} cli_bcomp_meta;

typedef struct cli_matcher {
  unsigned int type_0;
  uint8_t *bm_shift;
  struct cli_bm_patt **bm_suffix;
  struct cli_bm_patt **bm_pattab;
  uint32_t *soff;
  uint32_t soff_len;
  uint32_t bm_offmode;
  uint32_t bm_patterns;
  uint32_t bm_reloff_num;
  uint32_t bm_absoff_num;
  struct cli_hash_patt hm;
  struct cli_hash_wild hwild;
  uint32_t ac_partsigs;
  uint32_t ac_nodes;
  uint32_t ac_lists;
  uint32_t ac_patterns;
  uint32_t ac_lsigs;
  struct cli_ac_lsig **ac_lsigtable;
  struct cli_ac_node *ac_root;
  struct cli_ac_node **ac_nodetable;
  struct cli_ac_list **ac_listtable;
  struct cli_ac_patt **ac_pattable;
  struct cli_ac_patt **ac_reloff;
  uint32_t ac_reloff_num;
  uint32_t ac_absoff_num;
  uint8_t ac_mindepth;
  uint8_t ac_maxdepth;
  filter *filter;
  uint16_t maxpatlen;
  uint8_t ac_only;
  uint32_t pcre_metas;
  struct cli_pcre_meta **pcre_metatable;
  uint32_t pcre_reloff_num;
  uint32_t pcre_absoff_num;
  uint32_t bcomp_metas;
  struct cli_bcomp_meta **bcomp_metatable;
  fuzzyhashmap_t fuzzy_hashmap;
  uint32_t linked_bcs;
  mpool_t *mempool;
} cli_matcher;

typedef unsigned int cli_file;

typedef cli_file cli_file_t;

typedef struct regex_t {
  int re_magic;
  size_t re_nsub;
  const char *re_endp;
  re_guts *re_g;
} regex_t;

typedef struct cli_cdb {
  char *virname;
  cli_file_t ctype;
  struct regex_t name;
  size_t csize[2];
  size_t fsizec[2];
  size_t fsizer[2];
  int encrypted;
  unsigned int filepos[2];
  int res1;
  void *res2;
  struct cli_cdb *next;
} cli_cdb;

typedef struct phishcheck {
  struct regex_t preg_numeric;
  int is_disabled;
} phishcheck;

typedef struct cli_dconf {
  uint32_t pe;
  uint32_t elf;
  uint32_t macho;
  uint32_t archive;
  uint32_t doc;
  uint32_t mail;
  uint32_t other;
  uint32_t phishing;
  uint32_t bytecode;
  uint32_t stats;
  uint32_t pcre;
} cli_dconf;

typedef struct cli_ftype {
  cli_file_t type_0;
  uint32_t offset;
  unsigned char *magic;
  char *tname;
  struct cli_ftype *next;
  uint16_t length;
} cli_ftype;

typedef struct cli_pwdb {
  char *name;
  char *passwd;
  uint16_t length;
  struct cli_pwdb *next;
} cli_pwdb;

typedef struct icomtr {
  unsigned int group[2];
  unsigned int color_avg[3];
  unsigned int color_x[3];
  unsigned int color_y[3];
  unsigned int gray_avg[3];
  unsigned int gray_x[3];
  unsigned int gray_y[3];
  unsigned int bright_avg[3];
  unsigned int bright_x[3];
  unsigned int bright_y[3];
  unsigned int dark_avg[3];
  unsigned int dark_x[3];
  unsigned int dark_y[3];
  unsigned int edge_avg[3];
  unsigned int edge_x[3];
  unsigned int edge_y[3];
  unsigned int noedge_avg[3];
  unsigned int noedge_x[3];
  unsigned int noedge_y[3];
  unsigned int rsum;
  unsigned int gsum;
  unsigned int bsum;
  unsigned int ccount;
  char *name;
} icomtr;

typedef struct icon_matcher {
  char **group_names[2];
  unsigned int group_counts[2];
  struct icomtr *icons[3];
  unsigned int icon_counts[3];
} icon_matcher;

typedef struct cl_cvd {
  char *time;
  unsigned int version;
  unsigned int sigs;
  unsigned int fl;
  char *md5;
  char *dsig;
  char *builder;
  unsigned int stime;
} cl_cvd;

typedef struct cli_dbinfo {
  char *name;
  char *hash;
  size_t size;
  struct cl_cvd *cvd;
  struct cli_dbinfo *next;
} cli_dbinfo;

typedef unsigned long long ulong64;

typedef ulong64 fp_digit;

typedef struct fp_int {
  fp_digit dp[72];
  int used;
  int sign;
} fp_int;

typedef unsigned int cli_crt_hashtype;

typedef struct cli_crt_t {
  char *name;
  uint8_t raw_subject[64];
  uint8_t raw_issuer[64];
  uint8_t raw_serial[64];
  uint8_t subject[20];
  uint8_t issuer[20];
  uint8_t serial[20];
  int ignore_serial;
  uint8_t tbshash[64];
  struct fp_int n;
  struct fp_int e;
  struct fp_int sig;
  time_t not_before;
  time_t not_after;
  cli_crt_hashtype hashtype;
  int certSign;
  int codeSign;
  int timeSign;
  int isBlocked;
  struct cli_crt_t *prev;
  struct cli_crt_t *next;
} cli_crt_t;

typedef struct cli_crt_t cli_crt;

typedef struct crtmgr {
  cli_crt *crts;
  unsigned int items;
} crtmgr;

typedef unsigned int cl_error_t;

typedef cl_error_t (*clcb_pre_cache)(int, const char*, void*);

typedef cl_error_t (*clcb_pre_scan)(int, const char*, void*);

typedef cl_error_t (*clcb_post_scan)(int, int, const char*, void*);

typedef void (*clcb_virus_found)(int, const char*, void*);

typedef int (*clcb_sigload)(const char*, const char*, unsigned int, void*);

typedef void (*clcb_hash)(int, unsigned long long, const unsigned char*, const char*, void*);

typedef cl_error_t (*clcb_meta)(const char*, unsigned long, const char*, unsigned long, int, unsigned int, void*);

typedef int (*clcb_file_props)(const char*, int, void*);

typedef cl_error_t (*clcb_progress)(size_t, size_t, void*);

typedef struct bytecode_metadata {
  char *compiler;
  char *sigmaker;
  uint64_t timestamp;
  unsigned int formatlevel;
  unsigned int minfunc;
  unsigned int maxfunc;
  unsigned int maxresource;
  unsigned int targetExclude;
} bytecode_metadata;

typedef unsigned int bc_state;

typedef struct bitset_tag {
  unsigned char *bitset;
  unsigned long length;
} bitset_tag;

typedef struct cli_bc {
  struct bytecode_metadata metadata;
  unsigned int id;
  unsigned int kind;
  unsigned int num_types;
  unsigned int num_func;
  cli_bc_func *funcs;
  cli_bc_type *types;
  uint64_t **globals;
  uint16_t *globaltys;
  size_t num_globals;
  bc_state state;
  struct bitset_tag *uses_apis;
  char *lsig;
  char *vnameprefix;
  char **vnames;
  unsigned int vnames_cnt;
  uint16_t start_tid;
  cli_bc_dbgnode *dbgnodes;
  unsigned int dbgnode_cnt;
  unsigned int hook_lsig_id;
  unsigned int trusted;
  uint32_t numGlobalBytes;
  uint8_t *globalBytes;
  uint32_t sigtime_id;
  uint32_t sigmatch_id;
  char *hook_name;
} cli_bc;

typedef struct cli_environment {
  uint32_t platform_id_a;
  uint32_t platform_id_b;
  uint32_t platform_id_c;
  uint32_t c_version;
  uint32_t cpp_version;
  uint32_t functionality_level;
  uint32_t dconf_level;
  int8_t engine_version[65];
  int8_t triple[65];
  int8_t cpu[65];
  int8_t sysname[65];
  int8_t release[65];
  int8_t version[65];
  int8_t machine[65];
  uint8_t big_endian;
  uint8_t sizeof_ptr;
  uint8_t arch;
  uint8_t os_category;
  uint8_t os;
  uint8_t compiler;
  uint8_t has_jit_compiled;
  uint8_t os_features;
  uint8_t reserved0;
} cli_environment;

typedef struct cli_all_bc {
  struct cli_bc *all_bcs;
  unsigned int count;
  cli_bcengine *engine;
  struct cli_environment env;
  int inited;
} cli_all_bc;

typedef unsigned int bytecode_security;

typedef unsigned int bytecode_mode;

typedef struct cli_section_hash {
  unsigned char md5[16];
  size_t len;
} cli_section_hash;

typedef struct cli_stats_sections {
  size_t nsections;
  struct cli_section_hash *sections;
} cli_stats_sections;

typedef struct cli_stats_sections stats_section_t;

typedef void (*clcb_stats_add_sample)(const char*, const unsigned char*, size_t, stats_section_t*, void*);

typedef void (*clcb_stats_remove_sample)(const char*, const unsigned char*, size_t, void*);

typedef void (*clcb_stats_decrement_count)(const char*, const unsigned char*, size_t, void*);

typedef void (*clcb_stats_submit)(struct cl_engine*, void*);

typedef void (*clcb_stats_flush)(struct cl_engine*, void*);

typedef size_t (*clcb_stats_get_num)(void*);

typedef size_t (*clcb_stats_get_size)(void*);

typedef char *(*clcb_stats_get_hostid)(void*);

typedef struct cl_engine {
  uint32_t refcount;
  uint32_t sdb;
  uint32_t dboptions;
  uint32_t dbversion[2];
  uint32_t ac_only;
  uint32_t ac_mindepth;
  uint32_t ac_maxdepth;
  char *tmpdir;
  uint32_t keeptmp;
  uint64_t engine_options;
  uint32_t maxscantime;
  uint64_t maxscansize;
  uint64_t maxfilesize;
  uint32_t max_recursion_level;
  uint32_t maxfiles;
  uint32_t min_cc_count;
  uint32_t min_ssn_count;
  struct cli_matcher **root;
  struct cli_matcher *hm_hdb;
  struct cli_matcher *hm_mdb;
  struct cli_matcher *hm_imp;
  struct cli_matcher *hm_fp;
  struct cli_cdb *cdb;
  regex_matcher *allow_list_matcher;
  regex_matcher *domain_list_matcher;
  struct phishcheck *phishcheck;
  struct cli_dconf *dconf;
  struct cli_ftype *ftypes;
  struct cli_ftype *ptypes;
  struct cli_pwdb **pwdbs;
  struct cli_matcher *test_root;
  struct cli_matcher *ignored;
  char *pua_cats;
  struct icon_matcher *iconcheck;
  CACHE *cache;
  struct cli_dbinfo *dbinfo;
  size_t num_total_signatures;
  mpool_t *mempool;
  struct crtmgr cmgr;
  clcb_pre_cache cb_pre_cache;
  clcb_pre_scan cb_pre_scan;
  clcb_post_scan cb_post_scan;
  clcb_virus_found cb_virus_found;
  clcb_sigload cb_sigload;
  void *cb_sigload_ctx;
  clcb_hash cb_hash;
  clcb_meta cb_meta;
  clcb_file_props cb_file_props;
  clcb_progress cb_sigload_progress;
  void *cb_sigload_progress_ctx;
  clcb_progress cb_engine_compile_progress;
  void *cb_engine_compile_progress_ctx;
  clcb_progress cb_engine_free_progress;
  void *cb_engine_free_progress_ctx;
  struct cli_all_bc bcs;
  unsigned int *hooks[7];
  unsigned int hooks_cnt[7];
  unsigned int hook_lsig_ids;
  bytecode_security bytecode_security;
  uint32_t bytecode_timeout;
  bytecode_mode bytecode_mode;
  uint64_t maxembeddedpe;
  uint64_t maxhtmlnormalize;
  uint64_t maxhtmlnotags;
  uint64_t maxscriptnormalize;
  uint64_t maxziptypercg;
  void *stats_data;
  clcb_stats_add_sample cb_stats_add_sample;
  clcb_stats_remove_sample cb_stats_remove_sample;
  clcb_stats_decrement_count cb_stats_decrement_count;
  clcb_stats_submit cb_stats_submit;
  clcb_stats_flush cb_stats_flush;
  clcb_stats_get_num cb_stats_get_num;
  clcb_stats_get_size cb_stats_get_size;
  clcb_stats_get_hostid cb_stats_get_hostid;
  uint32_t maxpartitions;
  uint32_t maxiconspe;
  uint32_t maxrechwp3;
  uint64_t pcre_match_limit;
  uint64_t pcre_recmatch_limit;
  uint64_t pcre_max_filesize;
  _yara_global *yara_global;
} cl_engine;

typedef unsigned int cl_engine_field;

typedef int json_bool;

typedef struct cl_scan_options {
  uint32_t general;
  uint32_t parse;
  uint32_t heuristic;
  uint32_t mail;
  uint32_t dev;
} cl_scan_options;

typedef __off_t off_t;

typedef off_t (*clcb_pread)(void*, void*, size_t, off_t);

typedef cl_fmap_t fmap_t;

typedef struct cl_fmap {
  void *handle;
  clcb_pread pread_cb;
  const void *data;
  time_t mtime;
  uint64_t pages;
  uint64_t pgsz;
  uint64_t paged;
  uint16_t aging;
  uint16_t dont_cache_flag;
  uint16_t handle_is_fd;
  size_t offset;
  size_t nested_offset;
  size_t real_len;
  size_t len;
  void (*unmap)(fmap_t*);
  const void *(*need)(fmap_t*, size_t, size_t, int);
  const void *(*need_offstr)(fmap_t*, size_t, size_t);
  const void *(*gets)(fmap_t*, char*, size_t*, size_t);
  void (*unneed_off)(fmap_t*, size_t, size_t);
  bool have_maphash;
  unsigned char maphash[16];
  uint64_t *bitmap;
  char *name;
} cl_fmap;

typedef struct cl_fmap cl_fmap_t;

typedef struct recursion_level_tag {
  cli_file_t type_0;
  size_t size;
  cl_fmap_t *fmap;
  uint32_t recursion_level_buffer;
  uint32_t recursion_level_buffer_fmap;
  bool is_normalized_layer;
  image_fuzzy_hash_t image_fuzzy_hash;
  bool calculated_image_fuzzy_hash;
} recursion_level_tag;

typedef struct recursion_level_tag recursion_level_t;

typedef struct bitset_tag bitset_t;

typedef cli_events cli_events_t;

typedef long __suseconds_t;

typedef struct timeval {
  __time_t tv_sec;
  __suseconds_t tv_usec;
} timeval;

typedef struct cli_ctx_tag {
  char *target_filepath;
  const char *sub_filepath;
  char *sub_tmpdir;
  const char **virname;
  unsigned int num_viruses;
  unsigned long *scanned;
  const struct cli_matcher *root;
  const struct cl_engine *engine;
  uint64_t scansize;
  struct cl_scan_options *options;
  unsigned int scannedfiles;
  unsigned int found_possibly_unwanted;
  unsigned int corrupted_input;
  recursion_level_t *recursion_stack;
  uint32_t recursion_stack_size;
  uint32_t recursion_level;
  fmap_t *fmap;
  bool next_layer_is_normalized;
  unsigned char handlertype_hash[16];
  struct cli_dconf *dconf;
  bitset_t *hook_lsig_matches;
  void *cb_ctx;
  cli_events_t *perf;
  json_object *properties;
  json_object *wrkproperty;
  struct timeval time_limit;
  bool limit_exceeded;
  bool abort_scan;
} cli_ctx_tag;

typedef struct cli_ctx_tag cli_ctx;

typedef struct blob {
  char *name;
  unsigned char *data;
  off_t len;
  off_t size;
  int isClosed;
} blob;

typedef struct fileblob {
  FILE *fp;
  int fd;
  struct blob b;
  char *fullname;
  cli_ctx *ctx;
  unsigned long bytes_scanned;
  uint8_t isNotEmpty_isInfected[1];
  uint8_t c2rust_padding[7];
} fileblob;

typedef unsigned int encoding_type;

typedef unsigned int mime_type;

typedef char line_t;

typedef struct text {
  line_t *t_line;
  struct text *t_next;
} text;

typedef struct message {
  encoding_type *encodingTypes;
  mime_type mimeType;
  int numberOfEncTypes;
  char *mimeSubtype;
  char **mimeArguments;
  char *mimeDispositionType;
  struct text *body_first;
  struct text *body_last;
  cli_ctx *ctx;
  size_t numberOfArguments;
  int base64chars;
  struct text *bounce;
  struct text *binhex;
  struct text *yenc;
  struct text *encoding;
  const struct text *dedupedThisFar;
  char base64_1;
  char base64_2;
  char base64_3;
  uint8_t isInfected_isTruncated[1];
  uint8_t c2rust_padding[4];
  json_object *jobj;
} message;

typedef struct tableEntry {
  char *key;
  struct tableEntry *next;
  int value;
} tableEntry;

typedef struct table {
  struct tableEntry *tableHead;
  struct tableEntry *tableLast;
  unsigned int flags;
} table;

typedef struct table table_t;

typedef unsigned int xmlNsType;

typedef xmlNsType xmlElementType;

typedef unsigned char xmlChar;

typedef struct _xmlNs {
  struct _xmlNs *next;
  xmlNsType type_0;
  const xmlChar *href;
  const xmlChar *prefix;
  void *_private;
  struct _xmlDoc *context;
} _xmlNs;

typedef struct _xmlNs xmlNs;

typedef unsigned int xmlAttributeType;

typedef struct _xmlAttr {
  void *_private;
  xmlElementType type_0;
  const xmlChar *name;
  struct _xmlNode *children;
  struct _xmlNode *last;
  struct _xmlNode *parent;
  struct _xmlAttr *next;
  struct _xmlAttr *prev;
  struct _xmlDoc *doc;
  xmlNs *ns;
  xmlAttributeType atype;
  void *psvi;
} _xmlAttr;

typedef struct _xmlNode {
  void *_private;
  xmlElementType type_0;
  const xmlChar *name;
  struct _xmlNode *children;
  struct _xmlNode *last;
  struct _xmlNode *parent;
  struct _xmlNode *next;
  struct _xmlNode *prev;
  struct _xmlDoc *doc;
  xmlNs *ns;
  xmlChar *content;
  struct _xmlAttr *properties;
  xmlNs *nsDef;
  void *psvi;
  unsigned short line;
  unsigned short extra;
} _xmlNode;

typedef struct _xmlDtd {
  void *_private;
  xmlElementType type_0;
  const xmlChar *name;
  struct _xmlNode *children;
  struct _xmlNode *last;
  struct _xmlDoc *parent;
  struct _xmlNode *next;
  struct _xmlNode *prev;
  struct _xmlDoc *doc;
  void *notations;
  void *elements;
  void *attributes;
  void *entities;
  const xmlChar *ExternalID;
  const xmlChar *SystemID;
  void *pentities;
} _xmlDtd;

typedef struct _xmlDoc {
  void *_private;
  xmlElementType type_0;
  char *name;
  struct _xmlNode *children;
  struct _xmlNode *last;
  struct _xmlNode *parent;
  struct _xmlNode *next;
  struct _xmlNode *prev;
  struct _xmlDoc *doc;
  int compression;
  int standalone;
  struct _xmlDtd *intSubset;
  struct _xmlDtd *extSubset;
  struct _xmlNs *oldNs;
  const xmlChar *version;
  const xmlChar *encoding;
  void *ids;
  void *refs;
  const xmlChar *URL;
  int charset;
  _xmlDict *dict;
  void *psvi;
  int parseFlags;
  int properties;
} _xmlDoc;

typedef struct _xmlDoc xmlDoc;

typedef xmlDoc *xmlDocPtr;

typedef _xmlTextReader xmlTextReader;

typedef xmlTextReader *xmlTextReaderPtr;

typedef struct key_entry {
  const char *key;
  const char *name;
  uint32_t type_0;
} key_entry;

typedef struct attrib_entry {
  const char *key;
  const char *value;
} attrib_entry;

typedef cl_error_t (*msxml_scan_cb)(int, const char*, cli_ctx*, int, struct attrib_entry*, void*);

typedef cl_error_t (*msxml_comment_cb)(const char*, cli_ctx*, void*, void*);

typedef struct msxml_ctx {
  msxml_scan_cb scan_cb;
  void *scan_data;
  msxml_comment_cb comment_cb;
  void *comment_data;
  msxml_ictx *ictx;
} msxml_ctx;

typedef xmlDocPtr htmlDocPtr;

typedef struct tag_arguments_tag {
  int count;
  int scanContents;
  unsigned char **tag;
  unsigned char **value;
  unsigned char **contents;
} tag_arguments_tag;

typedef struct tag_arguments_tag tag_arguments_t;

typedef unsigned int C2RustUnnamed;

typedef unsigned int C2RustUnnamed_0;

typedef unsigned int mbox_status;

typedef unsigned int C2RustUnnamed_5;

typedef unsigned int C2RustUnnamed_6;

#define _ISalnum 8

#define _ISpunct 4

#define _IScntrl 2

#define _ISblank 1

#define _ISgraph 32768

#define _ISprint 16384

#define _ISspace 8192

#define _ISxdigit 4096

#define _ISdigit 2048

#define _ISalpha 1024

#define _ISlower 512

#define _ISupper 256

#define PTHREAD_MUTEX_FAST_NP 0

#define PTHREAD_MUTEX_DEFAULT 0

#define PTHREAD_MUTEX_ERRORCHECK 2

#define PTHREAD_MUTEX_RECURSIVE 1

#define PTHREAD_MUTEX_NORMAL 0

#define PTHREAD_MUTEX_ADAPTIVE_NP 3

#define PTHREAD_MUTEX_ERRORCHECK_NP 2

#define PTHREAD_MUTEX_RECURSIVE_NP 1

#define PTHREAD_MUTEX_TIMED_NP 0

#define CL_ELAST_ERROR 35

#define CL_ERROR 34

#define CL_VERIFIED 33

#define CL_ESTATE 32

#define CL_EBUSY 31

#define CL_ELOCK 30

#define CL_EBYTECODE_TESTFAIL 29

#define CL_EBYTECODE 28

#define CL_EPARSE 27

#define CL_EFORMAT 26

#define CL_EMAXFILES 25

#define CL_EMAXSIZE 24

#define CL_EMAXREC 23

#define CL_BREAK 22

#define CL_ETIMEOUT 21

#define CL_EMEM 20

#define CL_EMAP 19

#define CL_ETMPDIR 18

#define CL_ETMPFILE 17

#define CL_EACCES 16

#define CL_EDUP 15

#define CL_EWRITE 14

#define CL_ESEEK 13

#define CL_EREAD 12

#define CL_ESTAT 11

#define CL_EUNLINK 10

#define CL_ECREAT 9

#define CL_EOPEN 8

#define CL_EUNPACK 7

#define CL_EVERIFY 6

#define CL_ECVD 5

#define CL_EMALFDB 4

#define CL_EARG 3

#define CL_ENULLARG 2

#define CL_VIRUS 1

#define CL_SUCCESS 0

#define CL_CLEAN 0

#define CL_BYTECODE_MODE_OFF 4

#define CL_BYTECODE_MODE_TEST 3

#define CL_BYTECODE_MODE_INTERPRETER 2

#define CL_BYTECODE_MODE_JIT 1

#define CL_BYTECODE_MODE_AUTO 0

#define CL_BYTECODE_TRUST_NOTHING 2

#define CL_BYTECODE_TRUST_SIGNED 1

#define CL_BYTECODE_TRUST_ALL 0

#define bc_disabled 4

#define bc_interp 3

#define bc_jit 2

#define bc_loaded 1

#define bc_skip 0

#define CLI_SHA512RSA 7

#define CLI_SHA384RSA 6

#define CLI_SHA256RSA 5

#define CLI_RSA 4

#define CLI_MD2RSA 3

#define CLI_MD5RSA 2

#define CLI_SHA1RSA 1

#define CLI_HASHTYPE_ANY 0

#define CLI_TDB_FTYPE_EXPR 5

#define CLI_TDB_FTYPE 4

#define CLI_TDB_RANGE2 3

#define CLI_TDB_STR 2

#define CLI_TDB_RANGE 1

#define CLI_TDB_UINT 0

#define CLI_YARA_OFFSET 2

#define CLI_YARA_NORMAL 1

#define CLI_LSIG_NORMAL 0

#define CL_TYPE_IGNORED 581

#define CL_TYPE_OTHER 580

#define CL_TYPE_LNK 579

#define CL_TYPE_MHTML 578

#define CL_TYPE_HWPOLE2 577

#define CL_TYPE_XML_HWP 576

#define CL_TYPE_XML_XL 575

#define CL_TYPE_XML_WORD 574

#define CL_TYPE_XDP 573

#define CL_TYPE_APM 572

#define CL_TYPE_GPT 571

#define CL_TYPE_DMG 570

#define CL_TYPE_ISO9660 569

#define CL_TYPE_ISHIELD_MSI 568

#define CL_TYPE_AUTOIT 567

#define CL_TYPE_NULSFT 566

#define CL_TYPE_EGGSFX 565

#define CL_TYPE_ARJSFX 564

#define CL_TYPE_CABSFX 563

#define CL_TYPE_7ZSFX 562

#define CL_TYPE_RARSFX 561

#define CL_TYPE_ZIPSFX 560

#define CL_TYPE_SFX 559

#define CL_TYPE_MAIL 558

#define CL_TYPE_HTML 557

#define CL_TYPE_MBR 556

#define CL_TYPE_PART_HFSPLUS 555

#define CL_TYPE_PART_ANY 554

#define CL_TYPE_EGG 553

#define CL_TYPE_PS 552

#define CL_TYPE_OOXML_HWP 551

#define CL_TYPE_HWP3 550

#define CL_TYPE_INTERNAL 549

#define CL_TYPE_OOXML_XL 548

#define CL_TYPE_OOXML_PPT 547

#define CL_TYPE_OOXML_WORD 546

#define CL_TYPE_XZ 545

#define CL_TYPE_XAR 544

#define CL_TYPE_JAVA 543

#define CL_TYPE_SWF 542

#define CL_TYPE_7Z 541

#define CL_TYPE_RTF 540

#define CL_TYPE_HTML_UTF16 539

#define CL_TYPE_SCRIPT 538

#define CL_TYPE_UUENCODED 537

#define CL_TYPE_PDF 536

#define CL_TYPE_CRYPTFF 535

#define CL_TYPE_TNEF 534

#define CL_TYPE_BINHEX 533

#define CL_TYPE_RIFF 532

#define CL_TYPE_TIFF 531

#define CL_TYPE_JPEG 530

#define CL_TYPE_PNG 529

#define CL_TYPE_GIF 528

#define CL_TYPE_GRAPHICS 527

#define CL_TYPE_SCRENC 526

#define CL_TYPE_SIS 525

#define CL_TYPE_MSCHM 524

#define CL_TYPE_MSCAB 523

#define CL_TYPE_MSOLE2 522

#define CL_TYPE_MSSZDD 521

#define CL_TYPE_ARJ 520

#define CL_TYPE_RAR 519

#define CL_TYPE_BZ 518

#define CL_TYPE_ZIP 517

#define CL_TYPE_GZ 516

#define CL_TYPE_CPIO_CRC 515

#define CL_TYPE_CPIO_NEWC 514

#define CL_TYPE_CPIO_ODC 513

#define CL_TYPE_CPIO_OLD 512

#define CL_TYPE_OLD_TAR 511

#define CL_TYPE_POSIX_TAR 510

#define CL_TYPE_MACHO_UNIBIN 509

#define CL_TYPE_MACHO 508

#define CL_TYPE_ELF 507

#define CL_TYPE_MSEXE 506

#define CL_TYPE_ERROR 505

#define CL_TYPE_BINARY_DATA 504

#define CL_TYPE_TEXT_UTF16BE 503

#define CL_TYPE_TEXT_UTF16LE 502

#define CL_TYPE_TEXT_UTF8 501

#define CL_TYPE_TEXT_ASCII 500

#define CL_TYPE_ANY 0

#define CL_ENGINE_PE_DUMPCERTS 35

#define CL_ENGINE_DISABLE_PE_CERTS 34

#define CL_ENGINE_PCRE_MAX_FILESIZE 33

#define CL_ENGINE_PCRE_RECMATCH_LIMIT 32

#define CL_ENGINE_PCRE_MATCH_LIMIT 31

#define CL_ENGINE_MAX_SCANTIME 30

#define CL_ENGINE_MAX_RECHWP3 29

#define CL_ENGINE_MAX_ICONSPE 28

#define CL_ENGINE_MAX_PARTITIONS 27

#define CL_ENGINE_STATS_TIMEOUT 26

#define CL_ENGINE_DISABLE_PE_STATS 25

#define CL_ENGINE_DISABLE_CACHE 24

#define CL_ENGINE_FORCETODISK 23

#define CL_ENGINE_MAX_ZIPTYPERCG 22

#define CL_ENGINE_MAX_SCRIPTNORMALIZE 21

#define CL_ENGINE_MAX_HTMLNOTAGS 20

#define CL_ENGINE_MAX_HTMLNORMALIZE 19

#define CL_ENGINE_MAX_EMBEDDEDPE 18

#define CL_ENGINE_BYTECODE_MODE 17

#define CL_ENGINE_BYTECODE_TIMEOUT 16

#define CL_ENGINE_BYTECODE_SECURITY 15

#define CL_ENGINE_KEEPTMP 14

#define CL_ENGINE_TMPDIR 13

#define CL_ENGINE_AC_MAXDEPTH 12

#define CL_ENGINE_AC_MINDEPTH 11

#define CL_ENGINE_AC_ONLY 10

#define CL_ENGINE_DB_TIME 9

#define CL_ENGINE_DB_VERSION 8

#define CL_ENGINE_DB_OPTIONS 7

#define CL_ENGINE_PUA_CATEGORIES 6

#define CL_ENGINE_MIN_SSN_COUNT 5

#define CL_ENGINE_MIN_CC_COUNT 4

#define CL_ENGINE_MAX_FILES 3

#define CL_ENGINE_MAX_RECURSION 2

#define CL_ENGINE_MAX_FILESIZE 1

#define CL_ENGINE_MAX_SCANSIZE 0

#define MEXTENSION 8

#define VIDEO 7

#define TEXT 6

#define MULTIPART 5

#define MESSAGE 4

#define IMAGE 3

#define AUDIO 2

#define APPLICATION 1

#define NOMIME 0

#define BINHEX 8

#define EEXTENSION 7

#define YENCODE 6

#define UUENCODE 5

#define BINARY 4

#define EIGHTBIT 3

#define BASE64 2

#define QUOTEDPRINTABLE 1

#define NOENCODING 0

#define VIRUS 3

#define MAXFILES 5

#define MAXREC 4

#define FAIL 0

#define OK_ATTACHMENTS_NOT_SAVED 2

#define OK 1

#define XML_DOCB_DOCUMENT_NODE 21

#define XML_XINCLUDE_END 20

#define XML_XINCLUDE_START 19

#define XML_NAMESPACE_DECL 18

#define XML_ENTITY_DECL 17

#define XML_ATTRIBUTE_DECL 16

#define XML_ELEMENT_DECL 15

#define XML_DTD_NODE 14

#define XML_HTML_DOCUMENT_NODE 13

#define XML_NOTATION_NODE 12

#define XML_DOCUMENT_FRAG_NODE 11

#define XML_DOCUMENT_TYPE_NODE 10

#define XML_DOCUMENT_NODE 9

#define XML_COMMENT_NODE 8

#define XML_PI_NODE 7

#define XML_ENTITY_NODE 6

#define XML_ENTITY_REF_NODE 5

#define XML_CDATA_SECTION_NODE 4

#define XML_TEXT_NODE 3

#define XML_ATTRIBUTE_NODE 2

#define XML_ELEMENT_NODE 1

#define XML_ATTRIBUTE_NOTATION 10

#define XML_ATTRIBUTE_ENUMERATION 9

#define XML_ATTRIBUTE_NMTOKENS 8

#define XML_ATTRIBUTE_NMTOKEN 7

#define XML_ATTRIBUTE_ENTITIES 6

#define XML_ATTRIBUTE_ENTITY 5

#define XML_ATTRIBUTE_IDREFS 4

#define XML_ATTRIBUTE_IDREF 3

#define XML_ATTRIBUTE_ID 2

#define XML_ATTRIBUTE_CDATA 1

#define XML_PARSE_NONET 2048

#define XML_PARSE_NOERROR 32

#define HTML_PARSE_NOWARNING 64

#define XML_PARSE_BIG_LINES 4194304

#define XML_PARSE_IGNORE_ENC 2097152

#define XML_PARSE_OLDSAX 1048576

#define XML_PARSE_HUGE 524288

#define XML_PARSE_NOBASEFIX 262144

#define XML_PARSE_OLD10 131072

#define XML_PARSE_COMPACT 65536

#define XML_PARSE_NOXINCNODE 32768

#define XML_PARSE_NOCDATA 16384

#define XML_PARSE_NSCLEAN 8192

#define XML_PARSE_NODICT 4096

#define XML_PARSE_XINCLUDE 1024

#define XML_PARSE_SAX1 512

#define XML_PARSE_NOBLANKS 256

#define XML_PARSE_PEDANTIC 128

#define XML_PARSE_NOWARNING 64

#define XML_PARSE_DTDVALID 16

#define XML_PARSE_DTDATTR 8

#define XML_PARSE_DTDLOAD 4

#define XML_PARSE_NOENT 2

#define XML_PARSE_RECOVER 1

#define HTML_PARSE_IGNORE_ENC 2097152

#define HTML_PARSE_COMPACT 65536

#define HTML_PARSE_NOIMPLIED 8192

#define HTML_PARSE_NONET 2048

#define HTML_PARSE_NOBLANKS 256

#define HTML_PARSE_PEDANTIC 128

#define HTML_PARSE_NOERROR 32

#define HTML_PARSE_NODEFDTD 4

#define HTML_PARSE_RECOVER 1

#define CONTENTS 2

#define CHARSET 1

#define LANGUAGE 0

bool script2cdiff(const char *script, const char *builder, const char *server);

/**
 * This function is only meant to be called from sigtool.c
 */
int32_t cdiff_apply(int32_t fd, uint16_t mode);

/**
 * Compute (and cache) a formatted error string from the provided [`FFIError`] pointer.
 *
 * # Safety
 *
 * `err` must not be NULL
 */
const char *ffierror_fmt(struct FFIError *err);

/**
 * Free a [`FFIError`] structure
 *
 * # Safety
 *
 * `err` must not be NULL
 */
void ffierror_free(struct FFIError *err);

/**
 * Initialize the hashmap
 */
fuzzyhashmap_t fuzzy_hashmap_new(void);

/**
 * Free the hashmap
 */
void fuzzy_hash_free_hashmap(fuzzyhashmap_t fuzzy_hashmap);

/**
 * C interface for fuzzy_hash_check().
 * Handles all the unsafe ffi stuff.
 *
 * # Safety
 *
 * No parameters may be NULL
 */
bool fuzzy_hash_check(fuzzyhashmap_t fuzzy_hashmap,
                      cli_ac_data *mdata,
                      image_fuzzy_hash_t image_fuzzy_hash);

/**
 * C interface for fuzzy_hash_load_subsignature().
 * Handles all the unsafe ffi stuff.
 *
 * # Safety
 *
 * `hexsig` and `err` must not be NULL
 */
bool fuzzy_hash_load_subsignature(fuzzyhashmap_t fuzzy_hashmap,
                                  const char *hexsig,
                                  uint32_t lsig_id,
                                  uint32_t subsig_id,
                                  struct FFIError **err);

/**
 * C interface for fuzzy_hash_calculate_image().
 * Handles all the unsafe ffi stuff.
 *
 * # Safety
 *
 * `file_bytes` and `hash_out` must not be NULL
 */
bool fuzzy_hash_calculate_image(const uint8_t *file_bytes,
                                uintptr_t file_size,
                                uint8_t *hash_out,
                                uintptr_t hash_out_len,
                                struct FFIError **err);

bool clrs_log_init(void);

/**
 * API exported for C code to log to standard error using Rust.
 * This would be be an alternative to fputs, and reliably prints
 * non-ASCII UTF8 characters on Windows, where fputs does not.
 */
void clrs_eprint(const char *c_buf);

extern int fclose(FILE *__stream);

extern FILE *fopen(const char*, const char*);

extern int putc(int __c, FILE *__stream);

extern char *fgets(char *__s, int __n, FILE *__stream);

extern int fputs(const char *__s, FILE *__stream);

extern long strtol(const char*, char**, int);

extern void *malloc(unsigned long);

extern void free(void*);

extern int *__errno_location(void);

extern int memcmp(const void*, const void*, unsigned long);

extern char *strcpy(char*, const char*);

extern char *strncpy(char*, const char*, unsigned long);

extern int strncmp(const char*, const char*, unsigned long);

extern char *strdup(const char*);

extern char *strchr(const char*, int);

extern char *strstr(const char*, const char*);

extern char *strtok_r(char *__s, const char *__delim, char **__save_ptr);

extern unsigned long strlen(const char*);

extern void *memset(void*, int, unsigned long);

extern int strcmp(const char*, const char*);

extern int strcasecmp(const char*, const char*);

extern int strncasecmp(const char*, const char*, unsigned long);

extern void *memcpy(void*, const void*, unsigned long);

extern const unsigned short **__ctype_b_loc(void);

extern const __int32_t **__ctype_tolower_loc(void);

extern time_t time(time_t *__timer);

extern DIR *opendir(const char *__name);

extern int closedir(DIR *__dirp);

extern struct dirent *readdir(DIR *__dirp);

extern void rewinddir(DIR *__dirp);

extern int close(int __fd);

extern int pthread_mutex_lock(union pthread_mutex_t *__mutex);

extern int pthread_mutex_unlock(union pthread_mutex_t *__mutex);

extern int __xstat(int __ver, const char *__filename, struct stat *__stat_buf);

extern int __fxstat(int __ver, int __fildes, struct stat *__stat_buf);

extern int mkdir(const char *__path, __mode_t __mode);

extern const char *cl_engine_get_str(const struct cl_engine *engine,
                                     cl_engine_field field,
                                     int *err);

extern unsigned char *cl_hash_data(const char *alg,
                                   const void *buf,
                                   size_t len,
                                   unsigned char *obuf,
                                   unsigned int *olen);

extern cli_file_t cli_compare_ftm_file(const unsigned char *buf,
                                       size_t buflen,
                                       const struct cl_engine *engine);

extern json_bool json_object_object_get_ex(const json_object *obj,
                                           const char *key,
                                           json_object **value);

extern size_t json_object_array_length(const json_object *obj);

extern json_object *json_object_array_get_idx(const json_object *obj, size_t idx);

extern const char *json_object_get_string(json_object *obj);

extern const char *__cli_strcasestr(const char *haystack, const char *needle);

extern int cli_chomp(char *string);

extern char *cli_str2hex(const char *string, unsigned int len);

extern char *cli_strtokbuf(const char *input, int fieldno, const char *delim, char *output);

extern size_t cli_strlcat(char *dst, const char *src, size_t sz);

extern cl_error_t cli_append_virus(cli_ctx *ctx, const char *virname);

extern void *cli_malloc(size_t nmemb);

extern void *cli_calloc(size_t nmemb, size_t size);

extern void *cli_realloc(void *ptr, size_t size);

extern char *cli_strdup(const char *s);

extern int cli_unlink(const char *pathname);

extern const char *cli_gettmpdir(void);

extern void cli_append_virus_if_heur_exceedsmax(cli_ctx*, char*);

extern const char *cli_strerror(int errnum, char *buf, size_t len);

extern void blobDestroy(struct blob *b);

extern unsigned char *blobGetData(const struct blob *b);

extern size_t blobGetDataSize(const struct blob *b);

extern struct fileblob *fileblobCreate(void);

extern int fileblobScanAndDestroy(struct fileblob *fb);

extern void fileblobDestroy(struct fileblob *fb);

extern void fileblobSetFilename(struct fileblob *fb, const char *dir, const char *filename);

extern const char *fileblobGetFilename(const struct fileblob *fb);

extern void fileblobSetCTX(struct fileblob *fb, cli_ctx *ctx);

extern int fileblobAddData(struct fileblob *fb, const unsigned char *data, size_t len);

extern int fileblobInfected(const struct fileblob *fb);

extern cl_error_t cli_json_addowner(json_object *owner,
                                    json_object *child,
                                    const char *key,
                                    int idx);

extern struct message *messageCreate(void);

extern void messageDestroy(struct message *m);

extern void messageReset(struct message *m);

extern int messageSetMimeType(struct message *m, const char *type_0);

extern mime_type messageGetMimeType(const struct message *m);

extern void messageSetMimeSubtype(struct message *m, const char *subtype_0);

extern const char *messageGetMimeSubtype(const struct message *m);

extern void messageSetDispositionType(struct message *m, const char *disptype);

extern const char *messageGetDispositionType(const struct message *m);

extern void messageAddArgument(struct message *m, const char *arg);

extern void messageAddArguments(struct message *m, const char *arg);

extern void messageSetEncoding(struct message *m, const char *enctype);

extern encoding_type messageGetEncoding(const struct message *m);

extern int messageAddLine(struct message *m, line_t *line);

extern int messageAddStr(struct message *m, const char *data);

extern int messageMoveText(struct message *m, struct text *t, struct message *old_message);

extern struct text *messageGetBody(struct message *m);

extern struct fileblob *messageToFileblob(struct message *m, const char *dir, int destroy);

extern struct blob *messageToBlob(struct message *m, int destroy);

extern struct text *binhexBegin(struct message *m);

extern struct text *bounceBegin(struct message *m);

extern struct text *encodingLine(struct message *m);

extern int isuuencodebegin(const char *line);

extern void messageSetCTX(struct message *m, cli_ctx *ctx);

extern int messageContainsVirus(const struct message *m);

extern int messageSavePartial(struct message *m,
                              const char *dir,
                              const char *id,
                              unsigned int part);

extern json_object *messageGetJObj(struct message *m);

extern void textDestroy(struct text *t_head);

extern struct text *textAddMessage(struct text *aText, struct message *aMessage);

extern struct blob *textToBlob(struct text *t, struct blob *b, int destroy);

extern struct fileblob *textToFileblob(struct text *t, struct fileblob *fb, int destroy);

extern int uudecodeFile(struct message *m,
                        const char *firstline,
                        const char *dir,
                        fmap_t *map,
                        size_t *at);

extern json_object *cli_jsonobj(json_object *obj, const char *key);

extern struct table *tableCreate(void);

extern void tableDestroy(table_t *table);

extern int tableInsert(table_t *table, const char *key, int value);

extern json_object *cli_jsonarray(json_object *obj, const char *key);

extern int tableFind(const table_t *table, const char *key);

extern cl_error_t cli_jsonint(json_object *obj, const char *key, int32_t i);

extern char *messageGetFilename(const struct message *m);

extern cl_error_t cli_jsonstr(json_object *obj, const char *key, const char *s);

extern cl_error_t cli_json_parse_error(json_object *root, const char *errstr);

extern const char *lineGetData(const line_t *line);

extern line_t *lineUnlink(line_t *line);

extern int messageHasFilename(const struct message *m);

extern void sanitiseName(char *name);

extern char *messageFindArgument(const struct message *m, const char *variable);

extern void xmlFreeDoc(xmlDocPtr cur);

extern void xmlFreeTextReader(xmlTextReaderPtr reader);

extern int xmlTextReaderClose(xmlTextReaderPtr reader);

extern int cli_msxml_parse_document(cli_ctx *ctx,
                                    xmlTextReaderPtr reader,
                                    const struct key_entry *keys,
                                    size_t num_keys,
                                    uint32_t flags,
                                    struct msxml_ctx *mxctx);

extern xmlTextReaderPtr xmlReaderForMemory(const char *buffer,
                                           int size,
                                           const char *URL,
                                           const char *encoding,
                                           int options);

extern xmlTextReaderPtr xmlReaderWalker(xmlDocPtr doc);

extern int xmlGetDocCompressMode(const xmlDoc *doc);

extern htmlDocPtr htmlReadMemory(const char *buffer,
                                 int size,
                                 const char *URL,
                                 const char *encoding,
                                 int options);

extern const xmlChar *htmlGetMetaEncoding(htmlDocPtr doc);

extern int html_normalise_mem(unsigned char *in_buff,
                              off_t in_size,
                              const char *dirname,
                              tag_arguments_t *hrefs,
                              const struct cli_dconf *dconf);

extern void html_tag_arg_free(tag_arguments_t *tags);

extern void html_tag_arg_add(tag_arguments_t *tags, const char *tag, char *value);

extern cl_error_t phishingScan(cli_ctx *ctx, tag_arguments_t *hrefs);

int atoi(const char *__nptr);

int tolower(int __c);

int stat(const char *__path, struct stat *__statbuf);

int fstat(int __fd, struct stat *__statbuf);

int cli_mbox(const char *dir, cli_ctx *ctx);

size_t strstrip(char *s);

extern void free(void*);

extern void *memcpy(void*, const void*, unsigned long);

extern void *memset(void*, int, unsigned long);

extern char *strcpy(char*, const char*);

extern int strcmp(const char*, const char*);

extern int strncmp(const char*, const char*, unsigned long);

extern char *strchr(const char*, int);

extern char *strstr(const char*, const char*);

extern unsigned long strlen(const char*);

extern int strcasecmp(const char*, const char*);

extern int strncasecmp(const char*, const char*, unsigned long);

extern const unsigned short **__ctype_b_loc(void);

extern const __int32_t **__ctype_tolower_loc(void);

extern int pthread_mutex_lock(union pthread_mutex_t *__mutex);

extern int pthread_mutex_unlock(union pthread_mutex_t *__mutex);

extern time_t time(time_t *__timer);

extern cli_file_t cli_compare_ftm_file(const unsigned char *buf,
                                       size_t buflen,
                                       const struct cl_engine *engine);

extern int json_object_put(json_object *obj);

extern int cli_chomp(char *string);

extern char *cli_strtok(const char *line, int field, const char *delim);

extern char *cli_strrcpy(char *dest, const char *source);

extern size_t cli_strlcat(char *dst, const char *src, size_t sz);

extern void *cli_malloc(size_t nmemb);

extern void *cli_calloc(size_t nmemb, size_t size);

extern void *cli_realloc(void *ptr, size_t size);

extern char *cli_strdup(const char *s);

extern struct blob *blobCreate(void);

extern void blobDestroy(struct blob *b);

extern void blobSetFilename(struct blob *b, const char *dir, const char *filename);

extern int blobAddData(struct blob *b, const unsigned char *data, size_t len);

extern int tableFind(const table_t *table, const char *key);

extern struct fileblob *fileblobCreate(void);

extern void fileblobDestroy(struct fileblob *fb);

extern void fileblobSetFilename(struct fileblob *fb, const char *dir, const char *filename);

extern void fileblobPartialSet(struct fileblob *fb, const char *fullname, const char *arg);

extern void fileblobSetCTX(struct fileblob *fb, cli_ctx *ctx);

extern int fileblobAddData(struct fileblob *fb, const unsigned char *data, size_t len);

extern line_t *lineCreate(const char *data);

extern line_t *lineLink(line_t *line);

extern line_t *lineUnlink(line_t *line);

extern const char *lineGetData(const line_t *line);

extern json_object *cli_jsonobj(json_object *obj, const char *key);

extern int tableInsert(table_t *table, const char *key, int value);

extern void textDestroy(struct text *t_head);

extern struct blob *textToBlob(struct text *t, struct blob *b, int destroy);

extern struct fileblob *textToFileblob(struct text *t, struct fileblob *fb, int destroy);

extern void tableDestroy(table_t *table);

extern struct table *tableCreate(void);

extern struct text *textMove(struct text *t_head, struct text *t);

extern size_t strstrip(char *s);

struct message *messageCreate(void);

void messageDestroy(struct message *m);

void messageReset(struct message *m);

int messageSetMimeType(struct message *mess, const char *type_0);

mime_type messageGetMimeType(const struct message *m);

void messageSetMimeSubtype(struct message *m, const char *subtype);

const char *messageGetMimeSubtype(const struct message *m);

void messageSetDispositionType(struct message *m, const char *disptype);

const char *messageGetDispositionType(const struct message *m);

void messageAddArgument(struct message *m, const char *arg);

void messageAddArguments(struct message *m, const char *s);

char *messageFindArgument(const struct message *m, const char *variable);

char *messageGetFilename(const struct message *m);

int messageHasFilename(const struct message *m);

void messageSetEncoding(struct message *m, const char *enctype);

encoding_type messageGetEncoding(const struct message *m);

int messageAddLine(struct message *m, line_t *line);

int messageAddStr(struct message *m, const char *data);

int messageMoveText(struct message *m, struct text *t, struct message *old_message);

struct text *messageGetBody(struct message *m);

unsigned char *base64Flush(struct message *m, unsigned char *buf);

int messageSavePartial(struct message *m, const char *dir, const char *md5id, unsigned int part);

struct fileblob *messageToFileblob(struct message *m, const char *dir, int destroy);

struct blob *messageToBlob(struct message *m, int destroy);

struct text *messageToText(struct message *m);

struct text *yEncBegin(struct message *m);

struct text *binhexBegin(struct message *m);

struct text *bounceBegin(struct message *m);

struct text *encodingLine(struct message *m);

unsigned char *decodeLine(struct message *m,
                          encoding_type et,
                          const char *line,
                          unsigned char *buf,
                          size_t buflen);

void messageSetCTX(struct message *m, cli_ctx *ctx);

int messageContainsVirus(const struct message *m);

int isuuencodebegin(const char *line);

json_object *messageGetJObj(struct message *m);

#endif /* __CLAMAV_RUST_H */
